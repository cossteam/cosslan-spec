// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/tool/grpc/v1/tool.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeviceService_DeviceUp_FullMethodName   = "/v1.DeviceService/DeviceUp"
	DeviceService_DeviceDown_FullMethodName = "/v1.DeviceService/DeviceDown"
)

// DeviceServiceClient is the client API for DeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceServiceClient interface {
	DeviceUp(ctx context.Context, in *DeviceUpRequest, opts ...grpc.CallOption) (*DeviceUpResponse, error)
	DeviceDown(ctx context.Context, in *DeviceDownRequest, opts ...grpc.CallOption) (*DeviceDownResponse, error)
}

type deviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServiceClient(cc grpc.ClientConnInterface) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) DeviceUp(ctx context.Context, in *DeviceUpRequest, opts ...grpc.CallOption) (*DeviceUpResponse, error) {
	out := new(DeviceUpResponse)
	err := c.cc.Invoke(ctx, DeviceService_DeviceUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) DeviceDown(ctx context.Context, in *DeviceDownRequest, opts ...grpc.CallOption) (*DeviceDownResponse, error) {
	out := new(DeviceDownResponse)
	err := c.cc.Invoke(ctx, DeviceService_DeviceDown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServiceServer is the server API for DeviceService service.
// All implementations should embed UnimplementedDeviceServiceServer
// for forward compatibility
type DeviceServiceServer interface {
	DeviceUp(context.Context, *DeviceUpRequest) (*DeviceUpResponse, error)
	DeviceDown(context.Context, *DeviceDownRequest) (*DeviceDownResponse, error)
}

// UnimplementedDeviceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeviceServiceServer struct {
}

func (UnimplementedDeviceServiceServer) DeviceUp(context.Context, *DeviceUpRequest) (*DeviceUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceUp not implemented")
}
func (UnimplementedDeviceServiceServer) DeviceDown(context.Context, *DeviceDownRequest) (*DeviceDownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceDown not implemented")
}

// UnsafeDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceServiceServer will
// result in compilation errors.
type UnsafeDeviceServiceServer interface {
	mustEmbedUnimplementedDeviceServiceServer()
}

func RegisterDeviceServiceServer(s grpc.ServiceRegistrar, srv DeviceServiceServer) {
	s.RegisterService(&DeviceService_ServiceDesc, srv)
}

func _DeviceService_DeviceUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).DeviceUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_DeviceUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).DeviceUp(ctx, req.(*DeviceUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_DeviceDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceDownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).DeviceDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_DeviceDown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).DeviceDown(ctx, req.(*DeviceDownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceService_ServiceDesc is the grpc.ServiceDesc for DeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeviceUp",
			Handler:    _DeviceService_DeviceUp_Handler,
		},
		{
			MethodName: "DeviceDown",
			Handler:    _DeviceService_DeviceDown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/tool/grpc/v1/tool.proto",
}
